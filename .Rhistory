pch = c(1, 1), # gives the legend appropriate symbols (lines)
lwd=c(1, 1),col=c('red','blue'), cex = 3, bty  = 'n') # gives the legend lines the correct color and width
dev.off()
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/zeroParameterData500SimsT250D300P2SH_C2_origLG.RData")
zeroParameterData_biased = zeroParameterData
lambdaChoice = 1
# qqnorm(zeroParameterTestStatQuantiles)
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/zeroParameterData500SimsT250D300P2SH_THIS_IS_WHAT_WE_USED.RData")
zeroParameterTestStatQuantiles = sort(zeroParameterData[lambdaChoice,2,])
pdf("T250d300p2ZeroParameterQQ_comp_new.pdf")
par(pty="s")
qqnorm(zeroParameterTestStatQuantiles, col = 'red', xlab="Quantiles of Standard Normal Distribution",
ylab="Sample Quantiles of Test Statistic" , main =NULL, cex.lab = 2)
qqline(zeroParameterTestStatQuantiles, col = 'black', lwd = 2)
zeroParameterTestStatQuantiles_biased = sort(zeroParameterData_biased[lambdaChoice,2,])
points( sort(rnorm(NUM_SIMS)),  sort(zeroParameterTestStatQuantiles_biased), col = 'blue')
legend(-.5, -1, # places a legend at the appropriate place
c('De-biased LG','Biased LG'), # puts text in the legend
lty = c(NA, NA),
pch = c(1, 1), # gives the legend appropriate symbols (lines)
lwd=c(1, 1),col=c('red','blue'), cex = 2, bty  = 'n') # gives the legend lines the correct color and width
dev.off()
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/zeroParameterData500SimsT250D300P2SH_C2_origLG.RData")
zeroParameterData_biased = zeroParameterData
lambdaChoice = 1
# qqnorm(zeroParameterTestStatQuantiles)
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/zeroParameterData500SimsT250D300P2SH_THIS_IS_WHAT_WE_USED.RData")
zeroParameterTestStatQuantiles = sort(zeroParameterData[lambdaChoice,2,])
pdf("T250d300p2ZeroParameterQQ_comp_new.pdf")
par(pty="s")
qqnorm(zeroParameterTestStatQuantiles, col = 'red', xlab="Quantiles of Standard Normal Distribution",
ylab="Sample Quantiles of Test Statistic" , main =NULL, cex.lab = 1.5)
qqline(zeroParameterTestStatQuantiles, col = 'black', lwd = 2)
zeroParameterTestStatQuantiles_biased = sort(zeroParameterData_biased[lambdaChoice,2,])
points( sort(rnorm(NUM_SIMS)),  sort(zeroParameterTestStatQuantiles_biased), col = 'blue')
legend(-.5, -1, # places a legend at the appropriate place
c('De-biased LG','Biased LG'), # puts text in the legend
lty = c(NA, NA),
pch = c(1, 1), # gives the legend appropriate symbols (lines)
lwd=c(1, 1),col=c('red','blue'), cex = 1.5, bty  = 'n') # gives the legend lines the correct color and width
dev.off()
zeroParameterData
ecdf(sort(zeroParameterData[lambdaChoice,3,]))
plot(ecdf(sort(zeroParameterData[lambdaChoice,3,])))
# get the range for the x and y axis
xrange <- range(listOfNonZeroCoefficients)
yrange <- range(0,1)#ange(numberOfCorrectNullHypothesisRejections[,1])
par(pty="s")
par(mar=c(4,0,0,0)+0.1)
# set up the plot
plot(xrange, yrange, type="n", xlab="Value of Non-Zero Coefficient",
ylab="Power" ,cex.lab = 1.5, cex.axis = 1)
source('~/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/powerPlots_comp.R', echo=TRUE)
source('~/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/powerPlots_comp.R', echo=TRUE)
source('~/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/powerPlots_comp.R', echo=TRUE)
source('~/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/powerPlots_comp.R', echo=TRUE)
source('~/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/powerPlots_comp.R', echo=TRUE)
source('~/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/powerPlots_comp.R', echo=TRUE)
source('~/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/powerPlots_comp.R', echo=TRUE)
source('~/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/powerPlots_comp.R', echo=TRUE)
source('~/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/powerPlots_comp.R', echo=TRUE)
source('~/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/powerPlots_comp.R', echo=TRUE)
source('~/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/powerPlots_comp.R', echo=TRUE)
source('~/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/powerPlots_comp.R', echo=TRUE)
pdf("T150D200P1_PR_new_legend2.pdf")
# Create Line Chart
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T250D300P1_PR_comp/avgPrecision_biased_T250_d300_p1.RData")
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T250D300P1_PR_comp/avgRecall_biased_T250_d300_p1.RData")
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T250D300P1_PR_comp/avgPrecision_unbiased_T250_d300_p1.RData")
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T250D300P1_PR_comp/avgRecall_unbiased_T250_d300_p1.RData")
# get the range for the x and y axis
xrange <- range(0,1)#range(min(biasedLassoGrangerEstimator$lambda), max(biasedLassoGrangerEstimator$lambda))
yrange <- range(0,1)
par(pty="s")
par(mar=c(4,0,0,0)+0.1)
# set up the plot
plot(xrange, yrange, type="n", xlab="Recall",
ylab="Precision" ,cex.lab = 1.5, cex.axis = 1, xaxs="i")
colors <- rainbow(2)
linetype <- c(1:2)
lines(rev(sort(avgRecall_biased[1,])), sort(avgPrecision_biased[1,]), col = 'blue', lwd = 2)
lines( c(1, rev(sort(avgRecall_unbiased[5,])), 0) , c( 0, sort(avgPrecision_unbiased[5,]),  1), col = 'red', lwd = 2)
legend(.1, .2, # places a legend at the appropriate place
c('De-biased LG','Biased LG'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2, 2),col=c('red','blue'), cex = 1.5, bty  = 'n') # gives the legend lines the correct color and width
dev.off()
pdf("T150D200P1_PR_new_legend2.pdf")
# Create Line Chart
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T250D300P1_PR_comp/avgPrecision_biased_T250_d300_p1.RData")
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T250D300P1_PR_comp/avgRecall_biased_T250_d300_p1.RData")
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T250D300P1_PR_comp/avgPrecision_unbiased_T250_d300_p1.RData")
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T250D300P1_PR_comp/avgRecall_unbiased_T250_d300_p1.RData")
# get the range for the x and y axis
xrange <- range(0,1)#range(min(biasedLassoGrangerEstimator$lambda), max(biasedLassoGrangerEstimator$lambda))
yrange <- range(0,1)
par(pty="s")
par(mar=c(4,4,0,0)+0.1)
# set up the plot
plot(xrange, yrange, type="n", xlab="Recall",
ylab="Precision" ,cex.lab = 1.5, cex.axis = 1, xaxs="i")
colors <- rainbow(2)
linetype <- c(1:2)
lines(rev(sort(avgRecall_biased[1,])), sort(avgPrecision_biased[1,]), col = 'blue', lwd = 2)
lines( c(1, rev(sort(avgRecall_unbiased[5,])), 0) , c( 0, sort(avgPrecision_unbiased[5,]),  1), col = 'red', lwd = 2)
legend(.1, .2, # places a legend at the appropriate place
c('De-biased LG','Biased LG'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2, 2),col=c('red','blue'), cex = 1.5, bty  = 'n') # gives the legend lines the correct color and width
dev.off()
source('~/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/powerPlots_comp.R', echo=TRUE)
pdf("T150D200P1_PR_new_legend2.pdf")
# Create Line Chart
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T150D200P1_PR_comp/avgPrecision_biased_T150_d200_p1.RData")
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T150D200P1_PR_comp/avgRecall_biased_T150_d200_p1.RData")
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T150D200P1_PR_comp/avgPrecision_unbiased_T150_d200_p1.RData")
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T150D200P1_PR_comp/avgRecall_unbiased_T150_d200_p1.RData")
# get the range for the x and y axis
xrange <- range(0,1)#range(min(biasedLassoGrangerEstimator$lambda), max(biasedLassoGrangerEstimator$lambda))
yrange <- range(0,1)
par(pty="s")
par(mar=c(4,4,0,0)+0.1)
# set up the plot
plot(xrange, yrange, type="n", xlab="Recall",
ylab="Precision" ,cex.lab = 1.5, cex.axis = 1, xaxs="i")
colors <- rainbow(2)
linetype <- c(1:2)
lines(rev(sort(avgRecall_biased[1,])), sort(avgPrecision_biased[1,]), col = 'blue', lwd = 2)
lines( c(1, rev(sort(avgRecall_unbiased[5,])), 0) , c( 0, sort(avgPrecision_unbiased[5,]),  1), col = 'red', lwd = 2)
legend(.1, .2, # places a legend at the appropriate place
c('De-biased LG','Biased LG'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2, 2),col=c('red','blue'), cex = 1.5, bty  = 'n') # gives the legend lines the correct color and width
dev.off()
pdf("T150D200P1_PR_new_legend2.pdf")
# Create Line Chart
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T150D200P1_PR_comp_new/avgPrecision_biased_T150_d200_p1.RData")
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T150D200P1_PR_comp_new/avgRecall_biased_T150_d200_p1.RData")
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T150D200P1_PR_comp_new/avgPrecision_unbiased_T150_d200_p1.RData")
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T150D200P1_PR_comp_new/avgRecall_unbiased_T150_d200_p1.RData")
# get the range for the x and y axis
xrange <- range(0,1)#range(min(biasedLassoGrangerEstimator$lambda), max(biasedLassoGrangerEstimator$lambda))
yrange <- range(0,1)
par(pty="s")
par(mar=c(4,4,0,0)+0.1)
# set up the plot
plot(xrange, yrange, type="n", xlab="Recall",
ylab="Precision" ,cex.lab = 1.5, cex.axis = 1, xaxs="i")
colors <- rainbow(2)
linetype <- c(1:2)
lines(rev(sort(avgRecall_biased[1,])), sort(avgPrecision_biased[1,]), col = 'blue', lwd = 2)
lines( c(1, rev(sort(avgRecall_unbiased[5,])), 0) , c( 0, sort(avgPrecision_unbiased[5,]),  1), col = 'red', lwd = 2)
legend(.1, .2, # places a legend at the appropriate place
c('De-biased LG','Biased LG'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2, 2),col=c('red','blue'), cex = 1.5, bty  = 'n') # gives the legend lines the correct color and width
dev.off()
pdf("T250D300P1_PR_new_legend2.pdf")
# Create Line Chart
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T250D300P1_PR_comp/avgPrecision_biased_T250_d300_p1.RData")
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T250D300P1_PR_comp/avgRecall_biased_T250_d300_p1.RData")
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T250D300P1_PR_comp/avgPrecision_unbiased_T250_d300_p1.RData")
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T250D300P1_PR_comp/avgRecall_unbiased_T250_d300_p1.RData")
#
#
# load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T150D200P1_PR_comp_new/avgPrecision_biased_T150_d200_p1.RData")
# load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T150D200P1_PR_comp_new/avgRecall_biased_T150_d200_p1.RData")
#
# load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T150D200P1_PR_comp_new/avgPrecision_unbiased_T150_d200_p1.RData")
# load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T150D200P1_PR_comp_new/avgRecall_unbiased_T150_d200_p1.RData")
#
# get the range for the x and y axis
xrange <- range(0,1)#range(min(biasedLassoGrangerEstimator$lambda), max(biasedLassoGrangerEstimator$lambda))
yrange <- range(0,1)
par(pty="s")
par(mar=c(4,4,0,0)+0.1)
# set up the plot
plot(xrange, yrange, type="n", xlab="Recall",
ylab="Precision" ,cex.lab = 1.5, cex.axis = 1, xaxs="i")
colors <- rainbow(2)
linetype <- c(1:2)
lines(rev(sort(avgRecall_biased[1,])), sort(avgPrecision_biased[1,]), col = 'blue', lwd = 2)
lines( c(1, rev(sort(avgRecall_unbiased[5,])), 0) , c( 0, sort(avgPrecision_unbiased[5,]),  1), col = 'red', lwd = 2)
legend(.1, .2, # places a legend at the appropriate place
c('De-biased LG','Biased LG'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2, 2),col=c('red','blue'), cex = 1.5, bty  = 'n') # gives the legend lines the correct color and width
dev.off()
pdf("T250D300P1_PR_new_legend2.pdf")
# Create Line Chart
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T250D300P1_PR_comp/avgPrecision_biased_T250_d300_p1.RData")
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T250D300P1_PR_comp/avgRecall_biased_T250_d300_p1.RData")
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T250D300P1_PR_comp/avgPrecision_unbiased_T250_d300_p1.RData")
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T250D300P1_PR_comp/avgRecall_unbiased_T250_d300_p1.RData")
#
#
# load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T150D200P1_PR_comp_new/avgPrecision_biased_T150_d200_p1.RData")
# load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T150D200P1_PR_comp_new/avgRecall_biased_T150_d200_p1.RData")
#
# load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T150D200P1_PR_comp_new/avgPrecision_unbiased_T150_d200_p1.RData")
# load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T150D200P1_PR_comp_new/avgRecall_unbiased_T150_d200_p1.RData")
#
# get the range for the x and y axis
xrange <- range(0,1)#range(min(biasedLassoGrangerEstimator$lambda), max(biasedLassoGrangerEstimator$lambda))
yrange <- range(0,1)
par(pty="s")
par(mar=c(4,4,4,4)+0.1)
# set up the plot
plot(xrange, yrange, type="n", xlab="Recall",
ylab="Precision" ,cex.lab = 1.5, cex.axis = 1, xaxs="i")
colors <- rainbow(2)
linetype <- c(1:2)
lines(rev(sort(avgRecall_biased[1,])), sort(avgPrecision_biased[1,]), col = 'blue', lwd = 2)
lines( c(1, rev(sort(avgRecall_unbiased[5,])), 0) , c( 0, sort(avgPrecision_unbiased[5,]),  1), col = 'red', lwd = 2)
legend(.1, .2, # places a legend at the appropriate place
c('De-biased LG','Biased LG'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2, 2),col=c('red','blue'), cex = 1.5, bty  = 'n') # gives the legend lines the correct color and width
dev.off()
pdf("T150D200P1_PR_new_legend2.pdf")
# Create Line Chart
# load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T250D300P1_PR_comp/avgPrecision_biased_T250_d300_p1.RData")
# load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T250D300P1_PR_comp/avgRecall_biased_T250_d300_p1.RData")
#
# load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T250D300P1_PR_comp/avgPrecision_unbiased_T250_d300_p1.RData")
# load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T250D300P1_PR_comp/avgRecall_unbiased_T250_d300_p1.RData")
#
#
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T150D200P1_PR_comp_new/avgPrecision_biased_T150_d200_p1.RData")
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T150D200P1_PR_comp_new/avgRecall_biased_T150_d200_p1.RData")
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T150D200P1_PR_comp_new/avgPrecision_unbiased_T150_d200_p1.RData")
load("/Users/aditya/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/T150D200P1_PR_comp_new/avgRecall_unbiased_T150_d200_p1.RData")
# get the range for the x and y axis
xrange <- range(0,1)#range(min(biasedLassoGrangerEstimator$lambda), max(biasedLassoGrangerEstimator$lambda))
yrange <- range(0,1)
par(pty="s")
par(mar=c(4,4,4,4)+0.1)
# set up the plot
plot(xrange, yrange, type="n", xlab="Recall",
ylab="Precision" ,cex.lab = 1.5, cex.axis = 1, xaxs="i")
colors <- rainbow(2)
linetype <- c(1:2)
lines(rev(sort(avgRecall_biased[1,])), sort(avgPrecision_biased[1,]), col = 'blue', lwd = 2)
lines( c(1, rev(sort(avgRecall_unbiased[5,])), 0) , c( 0, sort(avgPrecision_unbiased[5,]),  1), col = 'red', lwd = 2)
legend(.1, .2, # places a legend at the appropriate place
c('De-biased LG','Biased LG'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2, 2),col=c('red','blue'), cex = 1.5, bty  = 'n') # gives the legend lines the correct color and width
dev.off()
source('~/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/powerPlots_comp.R', echo=TRUE)
source('~/Aditya/3rd Year/Research/High DImensional Granger Causality HT and CI/powerPlots_comp.R', echo=TRUE)
# See: https://www.r-bloggers.com/modelling-dependence-with-copulas-in-r/ for refference
library('fitdistrplus')
library('compositions')
library('plot3D')
library('quantmod')
library('VineCopula')
library('copula')
getPercentChangesByYear <- function(symbol, startYear)
{
allData = getSymbols.yahoo(symbol, auto.assign=FALSE)
relevantColumn = names(allData)[length(names(allData))]
values = allData[,relevantColumn]
values = values[paste(startYear, '::')]
percentChanges = dailyReturn(values)
return(percentChanges)
}
getPercentChanges <- function(symbol)
{
allData = getSymbols.yahoo(symbol, auto.assign=FALSE)
relevantColumn = names(allData)[length(names(allData))]
values = allData[,relevantColumn]
values = values['2010::']
percentChanges = dailyReturn(values)
return(percentChanges)
}
getBestTDistDegreesOfFreedom <- function(vectorOfValues)
{
vectorOfValues = scale(vectorOfValues)#(vectorOfValues - mean(vectorOfValues)) / sd(vectorOfValues)
result = fitdistr(vectorOfValues, "t")
bestDegreesOfFreedom = result$estimate[3]
return (bestDegreesOfFreedom)
}
getMarginalDensity <- function(copula_dist, indexOfVariableWeWantMargDistFor, vectorOfValuesToConditionOn)
{
#vectorOfValuesToConditionOn has 0 at indexOfVariableWeWantMargDistFor (in addition to possibly zeroes elsewhere as well)
conditionalPDF = c()
xVals = seq(-10, 10, .01)
for(value in xVals)
{
thisPoint = vectorOfValuesToConditionOn
thisPoint[indexOfVariableWeWantMargDistFor] = value
densityAtThisPoint = dMvdc(thisPoint, copula_dist, log = FALSE)
conditionalPDF = c(conditionalPDF, densityAtThisPoint)
}
conditionalPDF = conditionalPDF / sum(conditionalPDF)
return ( list ( v1 = xVals, v2 = conditionalPDF   ) )
}
inverseCDF <- function(pdfVector, pdfXValues,  totalArea)
{
endIndex = length(pdfVector)
for(index in 1:length(pdfVector))
{
if( sum( pdfVector[ index : endIndex] ) < totalArea)
return(pdfXValues[index])
}
}
#Get all data
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
portfolioPrices = read.csv("portfolioPrices.csv")
portfolioPrices = portfolioPrices[complete.cases(portfolioPrices), ]
portfolioPrices = portfolioPrices[order( as.Date(portfolioPrices[,1], format = "%m/%d/%Y") ),  ]
betterDates <- as.Date(portfolioPrices$Date, "%m/%d/%y")
rownames(portfolioPrices) <- betterDates
portfolioPrices = subset(portfolioPrices, ,2)
portfolioChanges = data.frame(diff(as.matrix(portfolioPrices)))/portfolioPrices[-nrow(portfolioPrices),]
portfolioChanges = as.xts(portfolioChanges)
HYZD = getPercentChanges('HYZD')
SAVE = getPercentChanges('SAVE')
SKX = getPercentChanges('SKX')
GSPC = getPercentChanges('^GSPC') #oil etf
USO = getPercentChanges('USO') #oil etf
XLY = getPercentChanges('XLY') #consumer discretionary etf
UUP = getPercentChanges('UUP') #interest rates etf
# See: https://www.r-bloggers.com/modelling-dependence-with-copulas-in-r/ for refference
library('fitdistrplus')
library('compositions')
library('plot3D')
library('quantmod')
library('VineCopula')
library('copula')
getPercentChangesByYear <- function(symbol, startYear)
{
allData = getSymbols.yahoo(symbol, auto.assign=FALSE)
relevantColumn = names(allData)[length(names(allData))]
values = allData[,relevantColumn]
values = values[paste(startYear, '::')]
percentChanges = dailyReturn(values)
return(percentChanges)
}
getPercentChanges <- function(symbol)
{
allData = getSymbols.yahoo(symbol, auto.assign=FALSE)
relevantColumn = names(allData)[length(names(allData))]
values = allData[,relevantColumn]
values = values['2010::']
percentChanges = dailyReturn(values)
return(percentChanges)
}
getBestTDistDegreesOfFreedom <- function(vectorOfValues)
{
vectorOfValues = scale(vectorOfValues)#(vectorOfValues - mean(vectorOfValues)) / sd(vectorOfValues)
result = fitdistr(vectorOfValues, "t")
bestDegreesOfFreedom = result$estimate[3]
return (bestDegreesOfFreedom)
}
getMarginalDensity <- function(copula_dist, indexOfVariableWeWantMargDistFor, vectorOfValuesToConditionOn)
{
#vectorOfValuesToConditionOn has 0 at indexOfVariableWeWantMargDistFor (in addition to possibly zeroes elsewhere as well)
conditionalPDF = c()
xVals = seq(-10, 10, .01)
for(value in xVals)
{
thisPoint = vectorOfValuesToConditionOn
thisPoint[indexOfVariableWeWantMargDistFor] = value
densityAtThisPoint = dMvdc(thisPoint, copula_dist, log = FALSE)
conditionalPDF = c(conditionalPDF, densityAtThisPoint)
}
conditionalPDF = conditionalPDF / sum(conditionalPDF)
return ( list ( v1 = xVals, v2 = conditionalPDF   ) )
}
inverseCDF <- function(pdfVector, pdfXValues,  totalArea)
{
endIndex = length(pdfVector)
for(index in 1:length(pdfVector))
{
if( sum( pdfVector[ index : endIndex] ) < totalArea)
return(pdfXValues[index])
}
}
#Get all data
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
portfolioPrices = read.csv("portfolioPrices.csv")
portfolioPrices = portfolioPrices[complete.cases(portfolioPrices), ]
portfolioPrices = portfolioPrices[order( as.Date(portfolioPrices[,1], format = "%m/%d/%Y") ),  ]
betterDates <- as.Date(portfolioPrices$Date, "%m/%d/%y")
rownames(portfolioPrices) <- betterDates
portfolioPrices = subset(portfolioPrices, ,2)
portfolioChanges = data.frame(diff(as.matrix(portfolioPrices)))/portfolioPrices[-nrow(portfolioPrices),]
portfolioChanges = as.xts(portfolioChanges)
HYZD = getPercentChanges('HYZD')
SAVE = getPercentChanges('SAVE')
SKX = getPercentChanges('SKX')
GSPC = getPercentChanges('^GSPC') #oil etf
USO = getPercentChanges('USO') #oil etf
XLY = getPercentChanges('XLY') #consumer discretionary etf
UUP = getPercentChanges('UUP') #interest rates etf
# Need to do this if using the read in portoflio prices
indexClass(USO) <- "Date"
index(USO) <- strptime(index(USO), "%Y-%m-%d")
indexClass(XLY) <- "Date"
index(XLY) <- strptime(index(XLY), "%Y-%m-%d")
indexClassUUP <- "Date"
index(UUP) <- strptime(index(UUP), "%Y-%m-%d")
indexClassGSPC<- "Date"
index(GSPC) <- strptime(index(GSPC), "%Y-%m-%d")
allData = as.matrix(cbind(portfolioChanges, GSPC))
allData = allData[complete.cases(allData),]
namesList = c('Portfolio' , "GSPC")
allData = as.matrix(cbind(portfolioChanges, GSPC, UUP))
allData = allData[complete.cases(allData),]
model = lm(data = allData)
allData
model = lm(sum ~., data = allData)
model = lm(Sum ~., data = allData)
allData = as.matrix(cbind(portfolioChanges, GSPC, UUP))
model = lm(Sum ~., data = as.data.frame(allData))
model
names(model)
summary(model)
summary(model)$r.squared
names(summary(model))
summary(model)$adj.r.squared
model = lm(portfolioChanges ~., data = as.data.frame(allData))
model = lm(allData[,1] ~., data = as.data.frame(allData))
model
summary(model)
print(summary(model))
model = lm(portfolioChanges ~., data = as.data.frame(allData))
dim(portfolioChanges)
dim(allData)
allData = as.matrix(cbind(portfolioChanges, GSPC, UUP))
allData = allData[complete.cases(allData),]
dim(allData)
model = lm(portfolioChanges ~., data = as.data.frame(allData))
model
model = lm(portfolioChanges ~ allData[,1:], data = as.data.frame(allData))
model = lm(portfolioChanges ~ allData[,1:], data = as.data.frame(allData))
model = lm(portfolioChanges ~ allData, data = as.data.frame(allData))
model
model = lm(portfolioChanges ~ colnames(allData)[1:], data = as.data.frame(allData))
model = lm(portfolioChanges ~., data = as.data.frame(allData[,1:]))
model = lm(portfolioChanges ~., data = as.data.frame())
allData[,1;]
allData[,1:]
model = lm(portfolioChanges ~ allData[,1:dim(allData)[2]], data = as.data.frame(allData))
model
model = lm(portfolioChanges ~ allData[,1:dim(allData)[2]], data = as.data.frame(allData))
allData[,1:dim(allData)[2]]
allData[,2:dim(allData)[2]]
model = lm(portfolioChanges ~ allData[,2:dim(allData)[2]], data = as.data.frame(allData))
model
summary(model)
model = lm(portfolioChanges ~ allData[,2:dim(allData)[2]], data = as.data.frame(allData))
model
summary(model)
print(summary(model))
model = lm(portfolioChanges ~ allData[,1:dim(allData)[2]], data = as.data.frame(allData))
print(summary(model))
print(summary(model))pobs()
GSPC
det(allData)
v
allData%*%allData
t(allData)%*%allData
det(t(allData)%*%allData)
dim(allData)[2]
dim(allData)[1]
var
var(allData)
vars(allData)
fit = VAR(allData, p = 1)
library("vars")
fit = VAR(allData, p = 1)
fit
summary(var)
summary(fit)
summary(fit)[1]
summary(fit)[2]
summary(fit)[2]$adj.r.squared
names(summary(fit)[2])
names(summary(fit))
names(fit)
fit
fit[1]
fit[1]
summary(fit[1])
fit[1]
names()
names(fit[1])
fit[1]$varresult
names(fit[1]$varresult)
summary(fit)
names(summary(fit))
summary(fit)
fit[1]
fit[1][1]
fit[1][2]
fit[1][3]
fit[1][1]
fit$varresult$Sum
summary(fit$varresult$Sum)
names(summary(fit$varresult$Sum))
summary(fit$varresult$Sum)$adj.r.squared
summary(fit$[1])$adj.r.squared
summary(fit[1])$adj.r.squared
summary(fit[1][1])$adj.r.squared
fit[1]
fit[1][1]
fit[1][2]
fit[1][1][1]
fit[1][1][1][1]
